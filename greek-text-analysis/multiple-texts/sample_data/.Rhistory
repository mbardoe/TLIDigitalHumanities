facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(subset(all_speakers.df, frequency > 5), aes(x=reorder(speaker, -frequency), y=frequency, fill=reorder(speaker, -frequency))) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(subset(all_speakers.df, frequency > 5), aes(x=reorder(speaker, frequency), y=frequency, fill=speaker)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(subset(all_speakers.df, frequency > 5), aes(x=speaker, y=frequency, fill=speaker)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
View(all_speakers.df)
ggplot(subset(all_speakers.df, frequency > 5), aes(x=reorder(speaker, -frequency), y=frequency, fill=speaker)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(all_speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=speaker)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(all_speakers.df, aes(x=reorder(speaker, frequency), y=frequency, fill=speaker)) +
# use a bar chart
# free_x allows one to only show frequency bars for
geom_bar(stat="identity") +
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(all_speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=speaker)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none") # remove legend
ggplot(all_speakers.df, aes(x=reorder(speaker, -frequency), y=frequency)) +
# use a bar chart
geom_bar(stat="identity") +
# free_x allows one to only show frequency bars for
# the characters that actually appear in a text
facet_wrap(~play, scales="free_x") +
# remove the legend from the plot
theme(legend.position="none")
ggplot(speakers.df, aes(x=speaker, y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker -frequency),
y=frequency,
fill=reorder(speaker -frequency))) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker -frequency),
y=frequency,
fill=reorder(speaker -frequency))) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker -frequency),
y=frequency,
fill=speaker)) +
geom_bar(stat="identity")
View(speakers.df)
ggplot(speakers.df, aes(x=reorder(speaker -frequency), y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=speaker, y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker -frequency), y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker -as.numeric(frequency)), y=frequency, fill=speaker)) +
geom_bar(stat="identity")
speakers.df$frequency <- as.numeric(as.character(speakers.df$frequency))
speakers.df$frequency
ggplot(speakers.df, aes(x=reorder(speakers, frequency), y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=speaker)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=reorder(speaker, -frequency)) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=reorder(speaker, -frequency))) +
geom_bar(stat="identity")
ggplot(speakers.df, aes(x=reorder(speaker, -frequency), y=frequency, fill=reorder(speaker, -frequency))) +
geom_bar(stat="identity")
for (file in all_files) {
######################
# extract plain text #
######################
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_one_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
text_time <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(text_time)
# convert the integer sequence to class numeric
text_data.df$text_time <- as.numeric(as.character(text_data.df$text_time))
# add a column to df for boolean presence of word
text_data.df$contains.word <- text.vector
# store the current text title in the dataframe
text_data.df$title <- text
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
}
quit
quit()
}
View(text_data.df)
file <- all_files[1]
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
text_time <- seq(1:length(split_text))
# create an x axis with one position for each word in the text of interest
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(text_time)
# convert the integer sequence to class numeric
text_data.df$text_time <- as.numeric(as.character(text_data.df$text_time))
# add a column to df for boolean presence of word
text_data.df$contains.word <- text.vector
# store the current text title in the dataframe
text_data.df$title <- text
text_data.df$contains.word <- text_vector
text_data.df$title <- text
text
text_data.df$title <- file
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
text_data.df
all_text_data.df <- data.frame(word_number=numeric(), contains_word=character(), file=character())
all_text_data.df <- data.frame(word_number=numeric(), contains_word=character(), file=character())
# loop over each file and extract the data of interest
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
word_number <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(word_number)
# convert the integer sequence to class numeric
text_data.df$word_number <- as.numeric(as.character(text_data.df$word_number))
# add a column to df for boolean presence of word
text_data.df$contains_word <- text.vector
# store the current text title in the dataframe
text_data.df$title <- file
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
}
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
word_number <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(word_number)
# convert the integer sequence to class numeric
text_data.df$word_number <- as.numeric(as.character(text_data.df$word_number))
# add a column to df for boolean presence of word
text_data.df$contains_word <- text_vector
# store the current text title in the dataframe
text_data.df$title <- file
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
}
all_files <- system("ls", intern=TRUE)
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
word_number <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
all_text_data.df <- data.frame(word_number=numeric(), contains_word=character(), file=character())
# loop over each file and extract the data of interest
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
word_number <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(word_number)
# convert the integer sequence to class numeric
text_data.df$word_number <- as.numeric(as.character(text_data.df$word_number))
# add a column to df for boolean presence of word
text_data.df$contains_word <- text_vector
# store the current text title in the dataframe
text_data.df$title <- file
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
}
>
all_text_data.df <- data.frame(word_number=numeric(), contains_word=character(), file=character())
# loop over each file and extract the data of interest
for (file in all_files) {
######################
# extract plain text #
######################
# extract the XML tree
file_tree <- htmlTreeParse(file, useInternalNodes = TRUE)
# select all of the speaker nodes
speaker_nodes <- getNodeSet(file_tree, "//speaker")
# remove the speaker nodes from file_one_tree
removeNodes(speaker_nodes)
# also remove the teiheader nodes
removeNodes(getNodeSet(file_tree, "//teiHeader"))
# get text between <text> tags
file_text <- xpathSApply(file_tree, "//text", xmlValue)
# replace \n . , and ; with whitespace
file_text_clean <- gsub("\n", " ", file_text)
file_text_clean <- gsub("\\.", " ", file_text_clean)
file_text_clean <- gsub(",", " ", file_text_clean)
file_text_clean <- gsub(";", " ", file_text_clean)
# split the text on one or more whitespaces
split_text <- unlist(strsplit(file_text_clean, "\\s+"))
# find all instances of one or more words from one group of words
group_one_positions <- which(split_text %in% c("τοῦ", "μετὰ"))
# find all instances of one or more words from another group of words
group_two_positions <- which(split_text %in% c("οἵ", "δʼ"))
# create an x axis with one position for each word in the text of interest
word_number <- seq(1:length(split_text))
# initialize a vector with length = text length, and set all values to 0
text_vector <- rep(0, length(split_text))
# change the text vector to indicate which words are of interest
text_vector[group_one_positions] <- "τοῦ or μετὰ"
text_vector[group_two_positions] <- "οἵ or δʼ"
# convert this text's text_vector to a dataframe
text_data.df <- as.data.frame(word_number)
# convert the integer sequence to class numeric
text_data.df$word_number <- as.numeric(as.character(text_data.df$word_number))
# add a column to df for boolean presence of word
text_data.df$contains_word <- text_vector
# store the current text title in the dataframe
text_data.df$title <- file
# append the current df to the master df
all_text_data.df <- rbind(text_data.df, all_text_data.df)
}
all_text_data.df
View(all_text_data.df)
limits <- aes(ymax=2, ymin=0)
View(all_text_data.df)
ggplot(subset(all_text_data.df, contains.word != 0),
aes(x=word_number,
y=as.factor(contains.word != 0),
color=as.factor(contains.word))) +
geom_linerange(limits) +  # draw lines where the words are present
scale_y_discrete() +      # ensure y axis is treated as a discrete distribution
xlab("Word number") +     # provide x axis label
ylab("") +                # provide y axis label
theme(
axis.text.y=element_blank(),          # remove the axis text from the y axis
axis.ticks.y=element_blank(),         # remove ticks from the y axis
plot.margin = unit(c(1,1,1,1), "cm")  # create margin around plot
) +
labs(color="Word") +                                        # provide title for legend
ggtitle("Distribution of selected words in Greek texts") +  # provide title for plot
facet_wrap(~title)
ggplot(subset(all_text_data.df, contains_word != 0),
aes(x=word_number,
y=as.factor(contains_word != 0),
color=as.factor(contains_word))) +
geom_linerange(limits) +  # draw lines where the words are present
scale_y_discrete() +      # ensure y axis is treated as a discrete distribution
xlab("Word number") +     # provide x axis label
ylab("") +                # provide y axis label
theme(
axis.text.y=element_blank(),          # remove the axis text from the y axis
axis.ticks.y=element_blank(),         # remove ticks from the y axis
plot.margin = unit(c(1,1,1,1), "cm")  # create margin around plot
) +
labs(color="Word") +                                        # provide title for legend
ggtitle("Distribution of selected words in Greek texts") +  # provide title for plot
facet_wrap(~title)
ggplot(subset(all_text_data.df, contains_word != 0),
aes(x=word_number,
y=as.factor(contains_word != 0),
color=as.factor(contains_word))) +
geom_linerange(limits) +  # draw lines where the words are present
scale_y_discrete() +      # ensure y axis is treated as a discrete distribution
xlab("Word number") +     # provide x axis label
ylab("") +                # provide y axis label
theme(
axis.text.y=element_blank(),          # remove the axis text from the y axis
axis.ticks.y=element_blank(),         # remove ticks from the y axis
plot.margin = unit(c(1,1,1,1), "cm")  # create margin around plot
) +
labs(color="Word") +                                        # provide title for legend
ggtitle("Distribution of selected words in Greek texts") +  # provide title for plot
facet_wrap(~title, scale="free_x")
plot <- ggplot(subset(all_text_data.df, contains_word != 0),
aes(x=word_number,
y=as.factor(contains_word != 0),
color=as.factor(contains_word))) +
geom_linerange(limits) +  # draw lines where the words are present
scale_y_discrete() +      # ensure y axis is treated as a discrete distribution
xlab("Word number") +     # provide x axis label
ylab("") +                # provide y axis label
theme(
axis.text.y=element_blank(),          # remove the axis text from the y axis
axis.ticks.y=element_blank(),         # remove ticks from the y axis
plot.margin = unit(c(1,1,1,1), "cm")  # create margin around plot
) +
labs(color="Word") +                                        # provide title for legend
ggtitle("Distribution of selected words in Greek texts") +  # provide title for plot
facet_wrap(~title, scale="free_x")
ggsave(filename="multiple_greek_words_multiple_texts_plot.png")
?ggsave
plot <- ggplot(subset(all_text_data.df, contains_word != 0),
aes(x=word_number,
y=as.factor(contains_word != 0),
color=as.factor(contains_word))) +
geom_linerange(limits) +  # draw lines where the words are present
scale_y_discrete() +      # ensure y axis is treated as a discrete distribution
xlab("Word number") +     # provide x axis label
ylab("") +                # provide y axis label
theme(
axis.text.y=element_blank(),          # remove the axis text from the y axis
axis.ticks.y=element_blank(),         # remove ticks from the y axis
plot.margin = unit(c(1,1,1,1), "cm")  # create margin around plot
) +
labs(color="Word") +                                        # provide title for legend
ggtitle("Distribution of selected words in Greek texts") +  # provide title for plot
facet_wrap(~title, scale="free_x")
# to save the plot to disk, pipe the output of the
# function call above to an object called plot, then call:
ggsave(filename="multiple_greek_words_multiple_texts_plot.png")
